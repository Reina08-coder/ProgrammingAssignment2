## This function creates a special "matrix" object that can cache its inverse
library(MASS)
makeCacheMatriz <- function (x =matriz()){
inv <- NULL  #initializing inverse as NULL will hold value of matrix inverse 
set <- function (y) {  ## define 
x <<- y  ## value of matrix in parent environment
inv <<- NULL ## if there is a new matrix, reset inv to NULL
}
get <- function () {x}    #fuction to get matriz x
setinverse <- function (inverse)inv <<- inverse  ## assigns value of inv in parent environment
getinverse <- function () inv  ## gets the value of inv where called

list(set=set, get=get, setinverse=setinverse, getinverse = getinverse)
}
# This is used to get the cacha data
cachesolve <- function (x, ...){
inv <- x$getinverse ()
if (!is.null(inv))){   #cheking wheter inverse in NULL
message(“getting cached data”)
return(inv)   #returnos inverse value
}
data <- x$get() 
inv <- solve(data, …) #calculates inverse value
x$setinverse(inv)
inv
}

